//
//  LoginAPI.swift
//  CoPro
//
//  Created by Î∞ïÌòÑÎ†¨ on 2/13/24.
//

import Foundation
import Alamofire
import UIKit
import KeychainSwift

final class LoginAPI : BaseAPI {
   static let shared = LoginAPI()
//   var currentUserNickName: String?
   var loginVC = LoginViewController()
   let keychain = KeychainSwift()
    private override init() {}
}
extension LoginAPI {
    var baseURL: String { return Config.baseURL }
    // Î°úÍ∑∏Ïù∏ API
   public func getAccessToken(authCode: String?, provider: String) {
      let headers: HTTPHeaders = [
         "Accept": "application/json"
      ]
      // Body ÏÑ§Ï†ï
      let parameters: Parameters = [
         "authCode" : authCode!,
      ]
      AF.request("https://copro.shop/api/\(provider)/token", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).validate(statusCode: 200..<300)
         .responseDecodable(of: LoginDTO.self) { response in
            switch response.result {
            case .success(let loginDTO):
               print("\(provider) Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")
               print("AccessToken: \(loginDTO.data.accessToken)")
               print("refreshToken: \(loginDTO.data.refreshToken)")
               let keychain = KeychainSwift()
               keychain.set(loginDTO.data.accessToken, forKey: "accessToken")
               keychain.set(loginDTO.data.refreshToken, forKey: "refreshToken")
               
               if let token = self.keychain.get("accessToken") {
                  print("Token is available.")
                  LoginAPI.shared.getCheckInitialLogin(token: token) { result in
                     print("Response received: \(result)")
                     switch result {
                     case .success(let data):
                        DispatchQueue.main.async {
                           if let data = data as? CheckInitialLoginDTO {
                              if data.data == true {
                                 print("ÎÇòÎäîÏïº Ï≤´ Î°úÍ∑∏Ïù∏")
                                 let alertVC = EditMyProfileViewController()
                                 DispatchQueue.main.async {
                                    if self.loginVC.isViewLoaded && self.loginVC.view.window != nil {
                                       alertVC.activeViewType = .FirstLogin
                                       self.loginVC.present(alertVC, animated: true, completion: nil)
                                    } else {
                                       print("LoginViewControllerÏùò Î∑∞Í∞Ä ÏúàÎèÑÏö∞ Í≥ÑÏ∏µÏóê ÏóÜÏäµÎãàÎã§.")
                                    }
                                 }
                              } else {
                                 print("ÎÇòÎäîÏïº non Ï≤´ Î°úÍ∑∏Ïù∏")
                                 self.getLoginUserData() {
                                    print("üçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçéüçé")
                                    DispatchQueue.main.async {
                                       guard let currentUserNickName = keychain.get("currentUserNickName") else {return print("getLoginUserData ÏïàÏóê currentUserNickName ÏÑ§Ï†ï ÏóêÎü¨")}
                                       let bottomTabController = BottomTabController()
                                       // ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú UINavigationControllerÏùò Î£®Ìä∏ Î∑∞ Ïª®Ìä∏Î°§Îü¨Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
                                       if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                                          let delegate = windowScene.delegate as? SceneDelegate,
                                          let window = delegate.window {
                                          window.rootViewController = bottomTabController
                                          window.makeKeyAndVisible()
                                       }
                                    }
                                }
                                
                                
                            case .requestErr(let message):
                                // Handle request error here.
                                print("Request error: \(message)")
                            case .pathErr:
                                // Handle path error here.
                                print("Path error")
                            case .serverErr:
                                // Handle server error here.
                                print("Server error")
                            case .networkFail:
                                // Handle network failure here.
                                print("Network failure")
                            default:
                                break
                            }
                            
                        }
                    }
                case .failure(_):
                    if let statusCode = response.response?.statusCode {
                        switch statusCode {
                        case 400:  // Í∏∞Ï°¥ ÌöåÏõê
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: Í∏∞Ï°¥ ÌöåÏõê")
                            DispatchQueue.main.async {
                                let alertController = UIAlertController(title: "Î°úÍ∑∏Ïù∏ Ïã§Ìå®", message: "Ìï¥Îãπ Ïù¥Î©îÏùºÎ°ú Ïù¥ÎØ∏ Í∞ÄÏûÖÌïú Í≥ÑÏ†ïÏù¥ ÏûàÏäµÎãàÎã§.\nÎã§Î•∏ ÏÜåÏÖú ÌîåÎû´ÌèºÏóêÏÑú Í∞ÄÏûÖÌïòÏòÄÎã§Î©¥, Ìï¥Îãπ ÌîåÎû´ÌèºÏùÑ ÌÜµÌï¥ Î°úÍ∑∏Ïù∏ÏùÑ ÏãúÎèÑÌï¥Ï£ºÏã≠ÏãúÏò§.", preferredStyle: .alert)
                                let action = UIAlertAction(title: "ÌôïÏù∏", style: .default)
                                alertController.addAction(action)
                                
                                // ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú Î∑∞ Ïª®Ìä∏Î°§Îü¨Î•º Ï∞æÏïÑÏÑú ÏïåÎ¶ºÏ∞ΩÏùÑ ÎùÑÏõÅÎãàÎã§.
                                if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                                   let delegate = windowScene.delegate as? SceneDelegate,
                                   let window = delegate.window,
                                   let viewController = window.rootViewController {
                                    viewController.present(alertController, animated: true, completion: nil)
                                }
                            }
                        case 401:  // Ïù∏Ï¶ù Ïã§Ìå®
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: Ïù∏Ï¶ù Ïã§Ìå®")
                        case 404:
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: Email Not Found")
                            DispatchQueue.main.async {
                                let alertController = UIAlertController(title: "Î°úÍ∑∏Ïù∏ Ïã§Ìå®", message: "Github Ïù¥Î©îÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\nÎã§Î•∏ ÌîåÎû´ÌèºÏùÑ Ïù¥Ïö©Ìïú Î°úÍ∑∏Ïù∏ ÌòπÏùÄ Github Ïù¥Î©îÏùºÏùÑ Îì±Î°ù ÌõÑ ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî", preferredStyle: .alert)
                                let action = UIAlertAction(title: "ÌôïÏù∏", style: .default)
                                alertController.addAction(action)
                                
                                // ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú Î∑∞ Ïª®Ìä∏Î°§Îü¨Î•º Ï∞æÏïÑÏÑú ÏïåÎ¶ºÏ∞ΩÏùÑ ÎùÑÏõÅÎãàÎã§.
                                if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                                   let delegate = windowScene.delegate as? SceneDelegate,
                                   let window = delegate.window,
                                   let viewController = window.rootViewController {
                                    viewController.present(alertController, animated: true, completion: nil)
                                }
                            }
                            
                        case 500...599:  // ÏÑúÎ≤Ñ ÏóêÎü¨
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏÑúÎ≤Ñ ÏóêÎü¨")
                        default:
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨")
                        }
                    }
                    
                }
            }
    }
    
    
    public func refreshAccessToken(completion: @escaping (Result<LoginDTO, Error>) -> Void){
        let keychain = KeychainSwift()
        guard let refreshToken = keychain.get("refreshToken") else {
            print("No refreshToken found in keychain.")
            return
        }
        let headers: HTTPHeaders = [
            "Accept": "application/json"
        ]
        // Body ÏÑ§Ï†ï
        let parameters: Parameters = [
            "refreshToken" : refreshToken,
        ]
        AF.request("https://copro.shop/api/token/access", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).validate(statusCode: 200..<300)
            .responseDecodable(of: LoginDTO.self) { response in
                switch response.result {
                case .success(let loginDTO):
                    print("Ïû¨Î∞úÍ∏â Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")
                    print("AccessToken: \(loginDTO.data.accessToken)")
                    print("refreshToken: \(loginDTO.data.refreshToken)")
                    let keychain = KeychainSwift()
                    keychain.set(loginDTO.data.accessToken, forKey: "accessToken")
                    keychain.set(loginDTO.data.refreshToken, forKey: "refreshToken")
                    completion(.success(loginDTO))
                case .failure(let error):
                    if let statusCode = response.response?.statusCode {
                        switch statusCode {
                        case 400...499:  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóêÎü¨
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóêÎü¨")
                        case 500...599:  // ÏÑúÎ≤Ñ ÏóêÎü¨
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏÑúÎ≤Ñ ÏóêÎü¨")
                        default:
                            print("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨")
                        }
                    }
                    completion(.failure(error))
                }
            }
    }
   
   // MARK: - ÏµúÏ¥à Î°úÍ∑∏Ïù∏ ÌôïÏù∏
   
   public func getCheckInitialLogin(token: String, completion: @escaping(NetworkResult<Any>) -> Void) {
      AFManager.request(LoginRouter.getCheckInitialLogin(token: token)).responseData { response in
          self.disposeNetwork(response,
                              dataModel: CheckInitialLoginDTO.self,
                              completion: completion)
      }
  }
   
   // MARK: - Ïú†Ï†Ä Ï†ïÎ≥¥ Î∞õÏïÑÏò§Í∏∞
   
   func getLoginUserData(completion: @escaping () -> Void) {
      let keychain = KeychainSwift()
       if let token = keychain.get("accessToken") {
           MyProfileAPI.shared.getMyProfile(token: token) { result in
               switch result {
               case .success(let data):
                   DispatchQueue.main.async {
                       if let data = data as? MyProfileDTO {
                          keychain.set(data.data.nickName, forKey: "currentUserNickName")
                          keychain.set(data.data.picture, forKey: "currentUserProfileImage")
//                          self.currentUserNickName = LoginUserDataModel(from: data.data).nickName
                           completion()
                       } else {
                           print("Failed to decode the response.")
                       }
                   }
               case .requestErr(let message):
                   // Handle request error here.
                   print("Request error: \(message)")
               case .pathErr:
                   // Handle path error here.
                   print("Path error")
               case .serverErr:
                   // Handle server error here.
                   print("Server error")
               case .networkFail:
                   // Handle network failure here.
                   print("Network failure")
               default:
                   break
               }
               
           }
       }
   }
}

